#!/usr/bin/env bash

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR="${SCRIPT_DIR}/.."
PROFILES_DIR="${SCRIPT_DIR}/../profiles"

set -euo pipefail

USER=$(whoami)

set +u
PROFILE="${1}"
PROFILE_DIR="${PROFILES_DIR}/${PROFILE}"
set -u

KDEV_NAME="kdev-${USER}-${PROFILE}"
MANIFEST_DIR="${ROOT_DIR}/tmp/${KDEV_NAME}"

function main() {
	if [[ $# -eq 1 ]]; then
		case $1 in
		list)
			list
			;;
		help)
			usage
			;;
		esac
	fi

	if [[ $# -ne 2 ]]; then
		usage
	fi

	case $2 in
	setup)
		profile_check
		profile_read
		pre_hook
		bucket_create
		manifests_template
		manifests_apply
		bucket_iam_create
		pod_init
		bucket_mount
		;;

	connect)
		profile_check
		profile_read
		pod_fast_connect_if_exists
		pre_hook
		bucket_create
		manifests_template
		manifests_apply
		bucket_iam_create
		pod_init
		bucket_mount
		pod_connect
		;;

	destroy)
		profile_check
		profile_read
		bucket_iam_destroy
		manifests_destroy
		exit
		;;

	destroy-data)
		profile_check
		profile_read
		bucket_destroy
		;;

	*)
		echo "Error: unknown command: $2"
		exit 1
		;;
	esac
}

function usage() {
	echo
	echo "  kdev - kubernetes development environment"
	echo
	echo "usage:"
	echo
	echo "  $(basename "$0") <profile|command> [sub-command]"
	echo
	echo "profiles:"
	echo
	for profile in "${PROFILES_DIR}"/*; do
		echo "  $(basename "${profile}")"
	done
	echo "commands:"
	echo
	echo "  list         - detect and list active profiles for current cluster"
	echo "  help         - show this help"
	echo
	echo "sub-commands:"
	echo
	echo "  setup        - configure but don't connect"
	echo "  connect      - setup (if required) and connect (default command if none specified)"
	echo "  destroy      - destroy all resources relating to the profile, apart from data bucket"
	echo "  destroy-data - destroy the data bucket and all data!"
	echo
	echo
	exit 1
}

# FIXME:
# * workout how to detect active profiles in non-prefixed namespaces
function list() {
	echo "==> listing kdev namespaces"
	kubectl get namespaces | awk '{ print $1 }' | grep -E '^kdev-*'
	exit
}

function pod_fast_connect_if_exists() {
	echo
	echo "==> checking if pod exists"

	set +e
	POD_READY=$(kubectl get pods --namespace="${KDEV_NAMESPACE}" "${KDEV_NAME}" -o jsonpath='{.status.containerStatuses[0].ready}' 2>/dev/null)
	set -e

	if [[ "${POD_READY}" == true ]]; then
		pod_connect
		exit
	fi
	echo "no ready pod detected.."
}

function pre_hook() {
	if test -f "${PROFILE_DIR}/pre-hook.sh"; then
		echo "==> running pre-hook"
		"${PROFILE_DIR}"/pre-hook.sh
	fi
}

function profile_check() {
	if ! test -d "${PROFILE_DIR}"; then
		echo "Error: profile not found: ${PROFILE_DIR}"
		exit 1
	fi
}

function profile_read() {
	echo "==> reading profile config"
	source "${PROFILE_DIR}/config.sh"
	KDEV_NAMESPACE="${KDEV_NAMESPACE:-$KDEV_NAME}"
	SERVICE_ACCOUNT="${KDEV_EXISTING_SERVICE_ACCOUNT:-${KDEV_NAME}@${KDEV_BUCKET_PROJECT}.iam.gserviceaccount.com}"
	echo "namespace: ${KDEV_NAMESPACE}"
	echo "service account: ${SERVICE_ACCOUNT}"
}

function bucket_create() {
	set +u
	if [[ -z "${KDEV_BUCKET_TYPE}" ]]; then
		return
	fi
	set -u

	echo
	echo "==> creating bucket"
	if [[ ${KDEV_BUCKET_TYPE} == aws ]] || [[ ${KDEV_BUCKET_TYPE} == AWS ]]; then
		echo "KDEV_BUCKET_TYPE: ${KDEV_BUCKET_TYPE} not yet supported"
		set -u
		return
	fi

	if [[ -z "${KDEV_BUCKET_LOCATION}" ]]; then
		echo "Error: KDEV_BUCKET_LOCATION not set in profile config: ${PROFILE_DIR}/config.sh"
		exit 1
	fi

	if [[ -z "${KDEV_BUCKET_PROJECT}" ]]; then
		echo "Error: KDEV_BUCKET_PROJECT not set in profile config: ${PROFILE_DIR}/config.sh"
		exit 1
	fi
	set -u

	# create a bucket to store our data in
	if ! gsutil ls -p "${KDEV_BUCKET_PROJECT}" "gs://${KDEV_NAME}" >/dev/null 2>&1; then
		gsutil mb -p "${KDEV_BUCKET_PROJECT}" -c regional -l "${KDEV_BUCKET_LOCATION}" "gs://${KDEV_NAME}"
	else
		echo "bucket already exists.."
	fi
}

# FIXME:
# * improve this to distinguish between kubernetes service accounts and
#   the default gcp service account
function bucket_iam_create() {
	set +u
	if [[ -z "${KDEV_BUCKET_TYPE}" ]]; then
		return
	fi
	set -u

	echo
	echo "==> setting up bucket IAM"

	set +u
	if [[ ! -z "${KDEV_EXISTING_SERVICE_ACCOUNT}" ]]; then
		echo "using default service account: ${KDEV_EXISTING_SERVICE_ACCOUNT}"
	else
		set -u
		# FIXME: check if already exists
		gcloud iam service-accounts create "${KDEV_NAME}" \
			--project="${KDEV_BUCKET_PROJECT}"
	fi
	set -u

	# FIXME: check if already exists
	gcloud projects add-iam-policy-binding "${KDEV_BUCKET_PROJECT}" \
		--project "${KDEV_BUCKET_PROJECT}" \
		--member "serviceAccount:${SERVICE_ACCOUNT}" \
		--role "roles/storage.admin"

	# FIXME:
	# * this is probably not correct in all circumstances..
	set -u
	if [[ -z "${KDEV_EXISTING_SERVICE_ACCOUNT}" ]]; then
		MEMBER_SERVICE_ACCOUNT="${KDEV_NAME}"
	else
		MEMBER_SERVICE_ACCOUNT="default"
	fi
	set +u

	# FIXME: check if already exists
	gcloud iam service-accounts add-iam-policy-binding \
		--project "${KDEV_BUCKET_PROJECT}" \
		"${SERVICE_ACCOUNT}" \
		--role roles/iam.workloadIdentityUser \
		--member "serviceAccount:${KDEV_BUCKET_PROJECT}.svc.id.goog[${KDEV_NAMESPACE}/${MEMBER_SERVICE_ACCOUNT}]"

	# FIXME: check if already exists
	kubectl annotate serviceaccount "${MEMBER_SERVICE_ACCOUNT}" \
		--namespace "${KDEV_NAMESPACE}" \
		"iam.gke.io/gcp-service-account=${SERVICE_ACCOUNT}"
}

function bucket_iam_destroy() {
	set +u
	if [[ -z "${KDEV_BUCKET_TYPE}" ]]; then
		return
	fi
	set -u

	echo
	echo "==> destroying bucket IAM"

	# FIXME:
	# * this is probably not correct in all circumstances..
	set -u
	if [[ -z "${KDEV_EXISTING_SERVICE_ACCOUNT}" ]]; then
		MEMBER_SERVICE_ACCOUNT="${KDEV_NAME}"
	else
		MEMBER_SERVICE_ACCOUNT="default"
	fi
	set +u

	# the hyphen at the end of the annotation means "remove"
	set +e
	kubectl annotate serviceaccount "${MEMBER_SERVICE_ACCOUNT}" \
		--namespace "${KDEV_NAMESPACE}" \
		"iam.gke.io/gcp-service-account-"
	set -e

	# FIXME: check state
	set +e
	gcloud projects remove-iam-policy-binding \
		"${KDEV_BUCKET_PROJECT}" \
		--project="${KDEV_BUCKET_PROJECT}" \
		--member="serviceAccount:${SERVICE_ACCOUNT}" \
		--role='roles/storage.admin'
	set -e

	set +u
	if [[ -z "${KDEV_EXISTING_SERVICE_ACCOUNT}" ]]; then
		set -u
		set +e
		# FIXME: check if already exists
		gcloud iam service-accounts delete \
			"${SERVICE_ACCOUNT}" \
			--project="${KDEV_BUCKET_PROJECT}" \
			--quiet
	fi
	set -u
	set -e
}

function bucket_mount() {
	set +u
	if [[ -z "${KDEV_BUCKET_TYPE}" ]]; then
		return
	fi
	set -u

	echo
	echo "==> mounting bucket"
	# FIXME:
	# * remove flag when this issue is fixed: https://github.com/GoogleCloudPlatform/gcsfuse/issues/985
	kubectl exec -it --namespace="${KDEV_NAMESPACE}" "${KDEV_NAME}" -- \
		/bin/bash -c "mkdir -p /mnt/${KDEV_NAME} && gcsfuse --enable-storage-client-library=false ${KDEV_NAME} /mnt/${KDEV_NAME}"
}

function bucket_destroy() {
	set +u
	if [[ -z "${KDEV_BUCKET_TYPE}" ]]; then
		return
	fi
	set -u

	# FIXME: warn about deleting data!
	echo
	echo "==> deleting bucket"
	set +e
	gsutil rm -r "gs://${KDEV_NAME}"
	set -e
}

# update manifests with KDEV_NAME..
function manifests_template() {
	echo
	echo "==> templating manifests"
	rm -rf "${MANIFEST_DIR}"
	mkdir -p "${MANIFEST_DIR}"

	for manifest in "${PROFILE_DIR}"/manifests/*.yaml; do
		echo
		echo "-> templating: ${manifest}"
		FILENAME=$(basename "${manifest}")
		sed "s/KDEV_NAMESPACE/${KDEV_NAMESPACE}/g;s/KDEV_NAME/${KDEV_NAME}/g" "${manifest}" >"${MANIFEST_DIR}/${FILENAME}"
	done
}

function manifests_apply() {
	echo
	echo "==> applying manifests"
	for manifest in "${MANIFEST_DIR}"/*.yaml; do
		echo
		echo "-> processing: ${manifest}"
		kubectl apply -f "${manifest}"
	done
}

function manifests_destroy() {
	echo
	echo "==> destroying manifests"

	rm -rf "${MANIFEST_DIR}"
	mkdir -p "${MANIFEST_DIR}"

	for manifest in "${PROFILE_DIR}"/manifests/*.yaml; do
		echo
		echo "-> templating: ${manifest}"
		FILENAME=$(basename "${manifest}")
		sed "s/KDEV_NAMESPACE/${KDEV_NAMESPACE}/g;s/KDEV_NAME/${KDEV_NAME}/g" "${manifest}" >"${MANIFEST_DIR}/${FILENAME}"
	done

	# NOTE: reversed list
	for manifest in $(ls -r "${MANIFEST_DIR}"/*.yaml); do
		echo
		echo "-> processing: ${manifest}"
		set +e
		kubectl delete -f "${manifest}"
		set -e
	done
}

function pod_init() {
	echo
	echo "==> initialize pod"

	set +e
	POD_READY=$(kubectl get pods --namespace="${KDEV_NAMESPACE}" "${KDEV_NAME}" -o jsonpath='{.status.containerStatuses[0].ready}' 2>/dev/null)
	set -e

	# permit overriding default image
	KDEV_IMAGE="${KDEV_IMAGE:-ubuntu}"

	if [[ "${POD_READY}" != true ]]; then
		echo "Error: pod not ready"
		exit 1
	fi

	if test -f "${PROFILE_DIR}/init.sh"; then
		time kubectl exec \
			-i \
			--namespace="${KDEV_NAMESPACE}" \
			"${KDEV_NAME}" -- /bin/bash <"${PROFILE_DIR}/init.sh"
	fi
}

function pod_connect() {
	echo
	echo "==> connecting to pod"

	KDEV_SHELL="${KDEV_SHELL:-/bin/bash}"

	kubectl exec \
		-it \
		--namespace="${KDEV_NAMESPACE}" \
		"${KDEV_NAME}" -- "${KDEV_SHELL}"

	echo
	echo "==> disconnected from pod"
	echo
}

main $*
